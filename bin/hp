#!/usr/bin/env node

var usage = 'Usage: hp [options]';
var options = {
    config: {
        alias : 'c'
        ,default : 'Proxyfile.js'
        ,describe : 'proxy config file'
    },
    target : {
        alias : 't'
        ,default : '.'
        ,describe : 'target directory'
    },
    port : {
        alias : 'p'
        ,default : 3000
        ,describe : 'server port'
    },
    log:{
        alias:'l'
        ,default: false
        ,describe: "log requests"
    },
    delay: {
        alias: 'd'
        ,type : 'number'
        ,describe: 'bandwidth delay'
    },
    reload: {
        alias : 'r'
        ,default: false
        ,describe : 'enable live reload changed files'
    },
    watch: {
        alias : 'w'
        ,default: './**/*.*'
        ,describe : 'files be watched and reloaded'
    },
    console: {
        default: false
        ,describe : 'enable remote logging service'
    },
    proxies: {
        type: "array",
        describe : 'enable request proxy'
    },
    open:{
        alias: 'o'
        ,default: true
        ,describe: 'open the default browser after server starting'
    }
};

var taskArgs = require('optimist')
    .usage(usage)
    .options(options);

var argv = taskArgs.argv;
if(argv.h || argv.help){
    var help = taskArgs.help();
    console.log(help);
}else if(argv.v || argv.version){
    var pkg = require('../package.json');
    console.log(pkg.version);
}else{
    var config = argv.config;
    try{
        var options = require(config);
        mixin(argv, options);
        console.log('load config file:', config)
    }catch(e){}

    require('../').run(argv, function(err){
        // Done
    });
}

function mixin(receiver, supplier) {
    if (Object.keys) {
        Object.keys(supplier).forEach(function(property) {
            Object.defineProperty(receiver, property, Object.getOwnPropertyDescriptor(supplier, property));
        });
    } else {
        for (var property in supplier) {
            if (supplier.hasOwnProperty(property)) {
                receiver[property] = supplier[property];
            }
        }
    }
}
